#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define FLR 3
#define ADJ 4

&lt { quick_tap_ms = <219>; };

&mt { quick_tap_ms = <219>; };

/ {
    behaviors {
        tdF: tap_dance_lang1 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <&kp F>, <&kp LG(F11)>;
        };

        tdJ: tap_dance_lang2 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <&kp J>, <&kp LG(F12)>;
        };

        lh_pht: left_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5>;    // <---[[right-hand keys]]
        };
    };

    combos {
        compatible = "zmk,combos";

        ParaLeft {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <15 14>;
            timeout-ms = <20>;
        };

        ParaRight {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <16 17>;
            timeout-ms = <20>;
        };

        BrakLeft {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <27 26>;
            timeout-ms = <20>;
        };

        BrakRight {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <28 29>;
            timeout-ms = <20>;
        };

        BraceLeft {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <39 38>;
            timeout-ms = <20>;
        };

        BraceRight {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <40 41>;
            timeout-ms = <20>;
        };

        DoubleQuote {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <26 25>;
            timeout-ms = <20>;
        };

        SingleQuote {
            bindings = <&kp APOSTROPHE>;
            key-positions = <29 30>;
            timeout-ms = <20>;
        };

        //LangRu {
        //    bindings = <&kp LG(F11)>;
        //    key-positions = <0 1>;
        //    timeout-ms = <20>;
        //};
        //LangUs {
        //   bindings = <&kp LG(F12)>;
        //    key-positions = <10 11>;
        //    timeout-ms = <20>;
        //};
        //LangRuL {
        //    bindings = <&kp LG(F11)>;
        //    key-positions = <36 38>;
        //    timeout-ms = <20>;
        //};
        //LangUsL {
        //    bindings = <&kp LG(F12)>;
        //    key-positions = <39 41>;
        //    timeout-ms = <20>;
        //};

        TildaSign {
            bindings = <&kp TILDE>;
            key-positions = <10 22>;
            timeout-ms = <20>;
        };

        GraveSign {
            bindings = <&kp GRAVE>;
            key-positions = <34 22>;
            timeout-ms = <20>;
        };

        MinusSign {
            bindings = <&kp MINUS>;
            key-positions = <14 13>;
            timeout-ms = <20>;
        };

        PlusSign {
            bindings = <&kp PLUS>;
            key-positions = <12 13>;
            timeout-ms = <20>;
        };

        UnderscoreSign {
            bindings = <&kp UNDERSCORE>;
            key-positions = <17 18>;
            timeout-ms = <20>;
        };

        PipeSign {
            bindings = <&kp PIPE>;
            key-positions = <18 19>;
            timeout-ms = <20>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &kp NUMBER_1  &kp NUMBER_2       &kp NUMBER_3     &kp NUMBER_4  &kp N5          &kp NUMBER_6      &kp N7         &kp N8          &kp N9      &kp N0
&kp ESC     &kp Q         &kp W              &kp E            &kp R         &kp T           &kp Y             &kp U          &kp I           &kp O       &kp P          &lt FLR LEFT_BRACKET
&kp TAB     &kp A         &kp S              &kp D            &kp F         &kp G           &kp H             &kp J          &kp K           &kp L       &kp SEMICOLON  &kp SQT
&kp LSHIFT  &kp Z         &kp X              &kp C            &kp V         &kp B           &kp N             &kp M          &kp COMMA       &kp PERIOD  &kp SLASH      &mt RALT RIGHT_BRACKET
                          &kp C_VOLUME_DOWN  &kp C_VOLUME_UP                                                                 &kp LEFT_ARROW  &kp RIGHT

                                             &kp SPACE        &kp LEFT_ALT  &mt LGUI RET    &kp CAPSLOCK      &lt RSE SPACE  &kp ENTER
                                                              &kp LGUI      &mo 1           &kp LEFT_CONTROL  &kp BACKSPACE
            >;
        };

        lower_layer {
            bindings = <
           &trans    &trans  &trans    &trans    &trans         &trans        &trans        &trans      &trans    &trans
&kp TILDE  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT      &kp CARET     &kp AMPS      &kp ASTRK   &kp LPAR  &kp RPAR  &trans
&kp GRAVE  &trans    &trans  &trans    &trans    &trans         &trans        &trans        &trans      &trans    &trans    &trans
&kp LSHFT  &trans    &trans  &trans    &trans    &kp LG(F11)    &kp LG(F12)   &trans        &trans      &trans    &trans    &trans
                     &trans  &trans                                                         &trans      &trans

                             &mo ADJ   &trans    &trans         &trans        &trans        &kp KP_DOT
                                       &trans    &trans         &kp QUESTION  &kp KP_COMMA
            >;
        };

        raise_layer {
            bindings = <
              &trans  &trans     &trans    &trans       &trans         &trans     &trans     &trans    &trans     &trans
&trans        &trans  &kp PG_UP  &kp UP    &kp PG_DN    &kp HOME       &kp CARET  &kp PG_UP  &kp UP    &kp PG_DN  &kp HOME  &kp F17
&trans        &trans  &kp LEFT   &kp DOWN  &kp RIGHT    &kp END        &kp MINUS  &kp LEFT   &kp DOWN  &kp RIGHT  &kp END   &kp F18
&out OUT_TOG  &trans  &trans     &trans    &trans       &kp F15        &kp F16    &kp F23    &trans    &trans     &trans    &out OUT_TOG
                      &trans     &trans                                                      &trans    &trans

                                 &trans    &kp LG(F11)  &kp LG(F12)    &trans     &trans     &trans
                                           &trans       &trans         &trans     &trans
            >;
        };

        fbuttons_layer {
            bindings = <
        &trans  &trans  &trans   &trans   &trans     &trans  &trans  &trans    &trans     &trans
&kp F1  &kp F2  &kp F3  &kp F4   &kp F5   &kp F6     &trans  &trans  &kp LALT  &kp LSHFT  &kp LCTRL  &trans
&kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12    &trans  &trans  &trans    &trans     &trans     &trans
&trans  &trans  &trans  &trans   &trans   &trans     &trans  &trans  &trans    &trans     &trans     &trans
                &trans  &trans                                       &trans    &trans

                        &trans   &trans   &trans     &trans  &trans  &trans
                                 &trans   &trans     &trans  &trans
            >;
        };

        adjust_layer {
            bindings = <
              &trans       &trans       &trans        &trans        &trans          &trans        &trans        &trans        &trans        &trans
&trans        &trans       &bootloader  &sys_reset    &out OUT_TOG  &none           &none         &none         &none         &none         &none         &out OUT_TOG
&sys_reset    &bootloader  &bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1
&bt BT_SEL 0  &bt BT_CLR   &none        &kp KP_NUM    &none         &none           &none         &none         &none         &none         &none         &none
                           &none        &none                                                                   &trans        &trans

                                        &trans        &trans        &trans          &trans        &trans        &trans
                                                      &trans        &trans          &trans        &trans
            >;
        };
    };
};
